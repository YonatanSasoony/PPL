
(define equal
  (lambda (lst)
    (eq? lst '())))

(define last-element
  (lambda (lst)
    (if (equal lst) (lst)
    (if (equal (cdr lst))
        (car lst)
        (last-element (cdr lst))))))

(define power
  (lambda (n1 n2)
    (if (= n2 0)
    1
    (* (power n1 (- n2 1)) n1)
       )))

(define  sum-lst-power
  (lambda (lst n)
    (if (equal lst)
        0
        (+ (power (car lst) n) (sum-lst-power (cdr lst) n)))))
           

(define len
  (lambda (lst)
    (if (equal lst)
    0
    (+ 1 (len (cdr lst))))))


(define  num-from-digits
  (lambda (lst)
    (num-from-digits-helper lst (- (len lst) 1 ))))

(define num-from-digits-helper
  (lambda(lst n)
  (if(equal lst)
     0
     (+ (* (car lst) (power 10 n)) (num-from-digits-helper (cdr lst) (- n 1)))))) 

(define  is-narcissistic
  (lambda (lst)
    (= (num-from-digits lst) (sum-lst-power lst (len lst)))))

 


